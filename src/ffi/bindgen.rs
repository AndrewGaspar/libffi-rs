/* automatically generated by rust-bindgen */

pub type ffi_arg = ::std::os::raw::c_ulong;
pub type ffi_sarg = ::std::os::raw::c_long;
pub const FFI_DEFAULT_ABI: Enum_ffi_abi = Enum_ffi_abi::FFI_UNIX64;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_ffi_abi {
    FFI_FIRST_ABI = 0,
    FFI_SYSV = 1,
    FFI_UNIX64 = 2,
    FFI_THISCALL = 3,
    FFI_FASTCALL = 4,
    FFI_STDCALL = 5,
    FFI_PASCAL = 6,
    FFI_REGISTER = 7,
    FFI_LAST_ABI = 8,
}
pub type ffi_abi = Enum_ffi_abi;
pub type ptrdiff_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = ::std::os::raw::c_double;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ffi_type {
    pub size: size_t,
    pub alignment: ::std::os::raw::c_ushort,
    pub _type: ::std::os::raw::c_ushort,
    pub elements: *mut *mut Struct__ffi_type,
}
impl ::std::clone::Clone for Struct__ffi_type {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ffi_type {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ffi_type = Struct__ffi_type;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed1 { FFI_OK = 0, FFI_BAD_TYPEDEF = 1, FFI_BAD_ABI = 2, }
pub type ffi_status = Enum_Unnamed1;
pub type FFI_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub abi: ffi_abi,
    pub nargs: ::std::os::raw::c_uint,
    pub arg_types: *mut *mut ffi_type,
    pub rtype: *mut ffi_type,
    pub bytes: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ffi_cif = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn sint(&mut self) -> *mut ffi_sarg {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uint(&mut self) -> *mut ffi_arg {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn flt(&mut self) -> *mut ::std::os::raw::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn data(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ffi_raw = Union_Unnamed3;
pub type ffi_java_raw = ffi_raw;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub tramp: [::std::os::raw::c_char; 24usize],
    pub cif: *mut ffi_cif,
    pub fun: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ffi_cif,
                                                        arg2:
                                                            *mut ::std::os::raw::c_void,
                                                        arg3:
                                                            *mut *mut ::std::os::raw::c_void,
                                                        arg4:
                                                            *mut ::std::os::raw::c_void)>,
    pub user_data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ffi_closure = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub tramp: [::std::os::raw::c_char; 24usize],
    pub cif: *mut ffi_cif,
    pub translate_args: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut ffi_cif,
                                                                   arg2:
                                                                       *mut ::std::os::raw::c_void,
                                                                   arg3:
                                                                       *mut *mut ::std::os::raw::c_void,
                                                                   arg4:
                                                                       *mut ::std::os::raw::c_void)>,
    pub this_closure: *mut ::std::os::raw::c_void,
    pub fun: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ffi_cif,
                                                        arg2:
                                                            *mut ::std::os::raw::c_void,
                                                        arg3: *mut ffi_raw,
                                                        arg4:
                                                            *mut ::std::os::raw::c_void)>,
    pub user_data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ffi_raw_closure = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub tramp: [::std::os::raw::c_char; 24usize],
    pub cif: *mut ffi_cif,
    pub translate_args: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut ffi_cif,
                                                                   arg2:
                                                                       *mut ::std::os::raw::c_void,
                                                                   arg3:
                                                                       *mut *mut ::std::os::raw::c_void,
                                                                   arg4:
                                                                       *mut ::std::os::raw::c_void)>,
    pub this_closure: *mut ::std::os::raw::c_void,
    pub fun: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ffi_cif,
                                                        arg2:
                                                            *mut ::std::os::raw::c_void,
                                                        arg3:
                                                            *mut ffi_java_raw,
                                                        arg4:
                                                            *mut ::std::os::raw::c_void)>,
    pub user_data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ffi_java_raw_closure = Struct_Unnamed6;
extern "C" {
    pub static mut ffi_type_void: ffi_type;
    pub static mut ffi_type_uint8: ffi_type;
    pub static mut ffi_type_sint8: ffi_type;
    pub static mut ffi_type_uint16: ffi_type;
    pub static mut ffi_type_sint16: ffi_type;
    pub static mut ffi_type_uint32: ffi_type;
    pub static mut ffi_type_sint32: ffi_type;
    pub static mut ffi_type_uint64: ffi_type;
    pub static mut ffi_type_sint64: ffi_type;
    pub static mut ffi_type_float: ffi_type;
    pub static mut ffi_type_double: ffi_type;
    pub static mut ffi_type_pointer: ffi_type;
    pub static mut ffi_type_longdouble: ffi_type;
    pub static mut ffi_type_complex_float: ffi_type;
    pub static mut ffi_type_complex_double: ffi_type;
    pub static mut ffi_type_complex_longdouble: ffi_type;
}
extern "C" {
    pub fn ffi_prep_cif_core(cif: *mut ffi_cif, abi: ffi_abi,
                             isvariadic: ::std::os::raw::c_uint,
                             nfixedargs: ::std::os::raw::c_uint,
                             ntotalargs: ::std::os::raw::c_uint,
                             rtype: *mut ffi_type, atypes: *mut *mut ffi_type)
     -> ffi_status;
    pub fn ffi_raw_call(cif: *mut ffi_cif,
                        _fn: ::std::option::Option<extern "C" fn()>,
                        rvalue: *mut ::std::os::raw::c_void,
                        avalue: *mut ffi_raw);
    pub fn ffi_ptrarray_to_raw(cif: *mut ffi_cif,
                               args: *mut *mut ::std::os::raw::c_void,
                               raw: *mut ffi_raw);
    pub fn ffi_raw_to_ptrarray(cif: *mut ffi_cif, raw: *mut ffi_raw,
                               args: *mut *mut ::std::os::raw::c_void);
    pub fn ffi_raw_size(cif: *mut ffi_cif) -> size_t;
    pub fn ffi_java_raw_call(cif: *mut ffi_cif,
                             _fn: ::std::option::Option<extern "C" fn()>,
                             rvalue: *mut ::std::os::raw::c_void,
                             avalue: *mut ffi_java_raw);
    pub fn ffi_java_ptrarray_to_raw(cif: *mut ffi_cif,
                                    args: *mut *mut ::std::os::raw::c_void,
                                    raw: *mut ffi_java_raw);
    pub fn ffi_java_raw_to_ptrarray(cif: *mut ffi_cif, raw: *mut ffi_java_raw,
                                    args: *mut *mut ::std::os::raw::c_void);
    pub fn ffi_java_raw_size(cif: *mut ffi_cif) -> size_t;
    pub fn ffi_closure_alloc(size: size_t,
                             code: *mut *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn ffi_closure_free(arg1: *mut ::std::os::raw::c_void);
    pub fn ffi_prep_closure(arg1: *mut ffi_closure, arg2: *mut ffi_cif,
                            fun:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut ffi_cif,
                                                                           arg2:
                                                                               *mut ::std::os::raw::c_void,
                                                                           arg3:
                                                                               *mut *mut ::std::os::raw::c_void,
                                                                           arg4:
                                                                               *mut ::std::os::raw::c_void)>,
                            user_data: *mut ::std::os::raw::c_void)
     -> ffi_status;
    pub fn ffi_prep_closure_loc(arg1: *mut ffi_closure, arg2: *mut ffi_cif,
                                fun:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut ffi_cif,
                                                                               arg2:
                                                                                   *mut ::std::os::raw::c_void,
                                                                               arg3:
                                                                                   *mut *mut ::std::os::raw::c_void,
                                                                               arg4:
                                                                                   *mut ::std::os::raw::c_void)>,
                                user_data: *mut ::std::os::raw::c_void,
                                codeloc: *mut ::std::os::raw::c_void)
     -> ffi_status;
    pub fn ffi_prep_raw_closure(arg1: *mut ffi_raw_closure, cif: *mut ffi_cif,
                                fun:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut ffi_cif,
                                                                               arg2:
                                                                                   *mut ::std::os::raw::c_void,
                                                                               arg3:
                                                                                   *mut ffi_raw,
                                                                               arg4:
                                                                                   *mut ::std::os::raw::c_void)>,
                                user_data: *mut ::std::os::raw::c_void)
     -> ffi_status;
    pub fn ffi_prep_raw_closure_loc(arg1: *mut ffi_raw_closure,
                                    cif: *mut ffi_cif,
                                    fun:
                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut ffi_cif,
                                                                                   arg2:
                                                                                       *mut ::std::os::raw::c_void,
                                                                                   arg3:
                                                                                       *mut ffi_raw,
                                                                                   arg4:
                                                                                       *mut ::std::os::raw::c_void)>,
                                    user_data: *mut ::std::os::raw::c_void,
                                    codeloc: *mut ::std::os::raw::c_void)
     -> ffi_status;
    pub fn ffi_prep_java_raw_closure(arg1: *mut ffi_java_raw_closure,
                                     cif: *mut ffi_cif,
                                     fun:
                                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut ffi_cif,
                                                                                    arg2:
                                                                                        *mut ::std::os::raw::c_void,
                                                                                    arg3:
                                                                                        *mut ffi_java_raw,
                                                                                    arg4:
                                                                                        *mut ::std::os::raw::c_void)>,
                                     user_data: *mut ::std::os::raw::c_void)
     -> ffi_status;
    pub fn ffi_prep_java_raw_closure_loc(arg1: *mut ffi_java_raw_closure,
                                         cif: *mut ffi_cif,
                                         fun:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut ffi_cif,
                                                                                        arg2:
                                                                                            *mut ::std::os::raw::c_void,
                                                                                        arg3:
                                                                                            *mut ffi_java_raw,
                                                                                        arg4:
                                                                                            *mut ::std::os::raw::c_void)>,
                                         user_data:
                                             *mut ::std::os::raw::c_void,
                                         codeloc: *mut ::std::os::raw::c_void)
     -> ffi_status;
    pub fn ffi_prep_cif(cif: *mut ffi_cif, abi: ffi_abi,
                        nargs: ::std::os::raw::c_uint, rtype: *mut ffi_type,
                        atypes: *mut *mut ffi_type) -> ffi_status;
    pub fn ffi_prep_cif_var(cif: *mut ffi_cif, abi: ffi_abi,
                            nfixedargs: ::std::os::raw::c_uint,
                            ntotalargs: ::std::os::raw::c_uint,
                            rtype: *mut ffi_type, atypes: *mut *mut ffi_type)
     -> ffi_status;
    pub fn ffi_call(cif: *mut ffi_cif,
                    _fn: ::std::option::Option<extern "C" fn()>,
                    rvalue: *mut ::std::os::raw::c_void,
                    avalue: *mut *mut ::std::os::raw::c_void);
}
